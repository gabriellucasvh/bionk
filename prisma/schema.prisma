generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String        @id @default(uuid())
  name                          String?
  username                      String        @unique
  email                         String        @unique
  bio                           String?
  provider                      String?
  emailVerified                 DateTime?
  image                         String?       @default("https://res.cloudinary.com/dlfpjuk2r/image/upload/v1746226087/bionk/defaults/profile.png")
  bannerUrl                     String?
  hashedPassword                String?
  createdAt                     DateTime      @default(now())
  template                      String        @default("default")
  templateCategory              String        @default("minimalista")
  passwordResetExpires          DateTime?
  passwordResetToken            String?       @unique
  emailVerificationToken        String?       @unique
  emailVerificationTokenExpires DateTime?
  newEmailPending               String?       @unique
  verificationToken             String?       @unique
  verificationTokenExpiry       DateTime?
  registrationOtp               String?       @unique
  registrationOtpExpiry         DateTime?
  registrationOtpAttempts       Int           @default(0)
  registrationOtpBlockedUntil   DateTime?
  googleId                      String?
  accounts                      Account[]
  Link                          Link[]
  ProfileView                   ProfileView[]
  sessions                      Session[]
  SocialLink                    SocialLink[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id        Int         @id @default(autoincrement())
  title     String
  url       String
  active    Boolean     @default(true)
  sensitive Boolean     @default(false)
  clicks    Int         @default(0)
  order     Int         @default(0)
  userId    String
  archived  Boolean     @default(false)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  LinkClick LinkClick[]
  LinkView  LinkView[]
}

model LinkClick {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model LinkView {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  username  String
  url       String
  active    Boolean  @default(true)
  order     Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model ProfileView {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
