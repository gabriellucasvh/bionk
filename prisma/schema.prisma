generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  name                 String?
  username             String        @unique
  email                String        @unique
  bio                  String?
  provider             String?
  emailVerified        DateTime?
  template             String        @default("default")
  templateCategory     String        @default("minimalista")
  image                String?       @default("https://res.cloudinary.com/dlfpjuk2r/image/upload/v1746226087/bionk/defaults/profile.png")
  bannerUrl            String?
  hashedPassword       String?
  createdAt            DateTime      @default(now())
  passwordResetToken   String?       @unique
  passwordResetExpires DateTime?
  accounts             Account[]
  sessions             Session[]
  Link                 Link[]
  ProfileView          ProfileView[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id        Int         @id @default(autoincrement())
  title     String
  url       String
  active    Boolean     @default(true)
  sensitive Boolean     @default(false)
  clicks    Int         @default(0)
  order     Int         @default(0)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  LinkClick LinkClick[]
  LinkView  LinkView[]
}

model LinkClick {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model LinkView {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model ProfileView {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
