generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String         @id @default(uuid())
  name                          String
  username                      String         @unique
  email                         String         @unique
  bio                           String?
  provider                      String?
  emailVerified                 DateTime?
  image                         String?        @default("https://res.cloudinary.com/dlfpjuk2r/image/upload/v1757491297/default_xry2zk.png")
  bannerUrl                     String?
  hashedPassword                String?
  createdAt                     DateTime       @default(now())
  template                      String         @default("default")
  templateCategory              String         @default("classicos")
  passwordResetExpires          DateTime?
  passwordResetToken            String?        @unique
  emailVerificationToken        String?        @unique
  emailVerificationTokenExpires DateTime?
  newEmailPending               String?        @unique
  registrationOtp               String?        @unique
  registrationOtpAttempts       Int            @default(0)
  registrationOtpBlockedUntil   DateTime?
  registrationOtpExpiry         DateTime?
  passwordSetupToken            String?        @unique
  passwordSetupTokenExpiry      DateTime?
  otpToken                      String?        @unique
  otpTokenExpiry                DateTime?
  verificationToken             String?        @unique
  verificationTokenExpiry       DateTime?
  usernameReservedAt            DateTime?
  usernameReservationExpiry     DateTime?
  googleId                      String?
  subscriptionPlan              String?
  subscriptionStatus            String?
  billingCycle                  String?
  subscriptionEndDate           DateTime?
  subscriptionStartDate         DateTime?
  mercadopagoSubscriptionId     String?
  paymentMethodBrand            String?
  paymentMethodLastFour         String?
  pendingSubscriptionPlan       String?
  onboardingCompleted           Boolean        @default(false)
  status                        String         @default("pending")
  sensitiveProfile              Boolean        @default(false)
  isBanned                      Boolean        @default(false)
  banReason                     String?        @default("violation")
  bannedAt                      DateTime?
  accounts                      Account[]
  CustomPresets                 CustomPresets?
  Link                          Link[]
  Section                       Section[]
  sessions                      Session[]
  SocialLink                    SocialLink[]
  Text                          Text[]
  Video                         Video[]

  @@index([subscriptionStatus])
  @@index([createdAt])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id              Int         @id @default(autoincrement())
  title           String
  url             String?
  active          Boolean     @default(true)
  clicks          Int         @default(0)
  order           Int         @default(0)
  userId          String
  archived        Boolean     @default(false)
  badge           String?
  deleteOnClicks  Int?
  expiresAt       DateTime?
  launchesAt      DateTime?
  password        String?
  isProduct       Boolean?    @default(false)
  price           Float?
  productImageUrl String?
  sectionId       Int?
  customImageUrl  String?
  type            String      @default("link")
  animated        Boolean     @default(false)
  section         Section?    @relation(fields: [sectionId], references: [id])
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  LinkClick       LinkClick[]
  LinkView        LinkView[]

  @@index([sectionId])
  @@index([userId])
  @@index([userId, order])
  @@index([userId, type])
  @@index([expiresAt])
}

model LinkClick {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  device    String?  @default("unknown")
  userAgent String?
  country   String?
  referrer  String?
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId, createdAt])
  @@index([device])
  @@index([referrer])
}

model LinkView {
  id        Int      @id @default(autoincrement())
  linkId    Int
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId, createdAt])
}

model SocialLink {
  id        String   @id @default(uuid())
  platform  String
  username  String
  url       String
  active    Boolean  @default(true)
  order     Int      @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@index([userId])
}

model ProfileView {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  device    String?  @default("unknown")
  userAgent String?
  country   String?
  referrer  String?

  @@index([userId, createdAt])
  @@index([device])
  @@index([referrer])
}

model CustomPresets {
  id                       String  @id @default(uuid())
  userId                   String  @unique
  customBackgroundColor    String? @default("")
  customBackgroundGradient String? @default("")
  customTextColor          String? @default("")
  customFont               String? @default("")
  customButtonColor        String? @default("")
  customButtonTextColor    String? @default("")
  customButtonStyle        String? @default("solid")
  customButtonFill         String? @default("")
  customButtonCorners      String? @default("")
  headerStyle              String? @default("default")
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Text {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  position      String   @default("left")
  order         Int      @default(0)
  userId        String
  active        Boolean  @default(true)
  sectionId     Int?
  hasBackground Boolean  @default(true)
  isCompact     Boolean  @default(false)
  archived      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  section       Section? @relation(fields: [sectionId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([userId])
  @@index([userId, order])
}

model Section {
  id        Int      @id @default(autoincrement())
  title     String
  order     Int
  userId    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  links     Link[]
  texts     Text[]
  videos    Video[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  type        String
  url         String
  order       Int      @default(0)
  userId      String
  active      Boolean  @default(true)
  sectionId   Int?
  isCompact   Boolean  @default(false)
  archived    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  section     Section? @relation(fields: [sectionId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([userId])
  @@index([userId, order])
}
